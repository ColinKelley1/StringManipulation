Microsoft (R) Macro Assembler Version 6.11		    11/15/18 19:23:05
proj5a.asm						     Page 1 - 1


				;******************************************************************************************
				;Program Name: proj5a.asm
				;Programmer:   Colin Kelley
				;Class:        CSCI 2160-001
				;Date:         November 17, 2018 at 5:00 PM
				;Purpose:	This file contains various methods to test or manipulate strings
				;
				;******************************************************************************************

					.486
					.model flat
					
					memoryallocBailey	PROTO NEAR32 stdcall, dSize:dword
					
 00000000				.code
				COMMENT %
				;*****************************************************************************************
				;* Name:  String_length																	 *
				;* Purpose:	Accepts the address of a string and returns the number of non-null characters*			 															 
				;*																						 *
				;* Date created: November 15, 2018 at 1:00 PM		 
				;* Date last modified:	November 15, 2018 at 1:00 PM 			 
				;*																						 *
				;* Notes:	None																		 *
				;*																						 *
				;*	@param 	lpStringInQuestion:dword													 *
				;*	@return dword	
				;*
				;*****************************************************************************************%	
 00000000			String_length proc Near32
 00000000  55				push ebp		;Preserve ebp
 00000001  8B EC			mov ebp, esp	;Start a new stack frame
 00000003  53				push ebx		;Preserve ebx
 00000004  56				push esi		;Preserve esi
					
 00000005  8B 5D 08			mov ebx, [ebp+8]	;Save the address
 00000008  BE 00000000			mov esi, 0			;Set the index to 0
 0000000D			lengthLoop:
 0000000D  80 3C 1E 00			cmp byte ptr[ebx+esi], 0	;See if char is null
 00000011  74 03			je done		;if so then we are done
 00000013  46				inc esi			;Inc index
 00000014  EB F7			jmp lengthLoop	;loop back
 00000016			done:
 00000016  8B C6			mov eax, esi	;Move length into eax
 00000018  5B				pop ebx			;Restore ebx
 00000019  5E				pop	esi			;restore esi
 0000001A  5D				pop ebp			;restore ebp
 0000001B  C3				RET				;return
 0000001C			String_length endp

				COMMENT %
				;*****************************************************************************************
				;* Name:  String_copy																	 *
				;* Purpose:	Accepts the address of a string and makes a deep copy. Returns address of copy*			 															 
				;*																						 *
				;* Date created: November 15, 2018 at 1:00 PM		 
				;* Date last modified: November 15, 2018 at 1:00 PM			 
				;*																						 *
				;* Notes:	None																		 *
				;*																						 *
				;*	@param 	lpStringOriginal:dword														 *
				;*	@return dword	
				;*****************************************************************************************%
 0000001C			String_copy proc Near32
 0000001C  55				push ebp		;Preserve ebp
 0000001D  8B EC			mov ebp, esp	;Start a new stack frame
 0000001F  53				push ebx		;Preserve ebx
 00000020  52				push edx		;Preserve edx
 00000021  56				push esi		;Preserve esi
					
 00000022  8B 5D 08			mov ebx, [ebp+8]	;save address of string
					
 00000025  53				push ebx			;Push the parameter
 00000026  E8 FFFFFFD5			call String_Length	;Get the length of the string
 0000002B  5B				pop ebx				;Get address back
					
 0000002C  40				inc eax		;Inc to make space for NULL
					INVOKE memoryallocBailey,eax ;Create a new memory block
 00000033  8B D0			mov edx, eax		;Save new address
					
 00000035  BE 00000000			mov esi, 0		;Make sure esi is set to 0 for the offset
					
 0000003A			beginLoop:
 0000003A  8A 04 1E			mov al, byte ptr[ebx+esi]		;Move the character into al
 0000003D  88 04 16			mov byte ptr[edx+esi], al		;Copy into destination string
 00000040  80 3C 16 00			cmp byte ptr[edx+esi], 0		;See if last byte is null
 00000044  74 03			je done			;Jump if the final character is null
 00000046  46				inc esi			;Increment index
 00000047  EB F1			jmp beginLoop	;Return to beginning of loop
					
 00000049			done:
 00000049  8B C2			mov eax, edx	;Mov the address into eax
 0000004B  5E				pop esi	;restore esi
 0000004C  5A				pop edx	;restore edx
 0000004D  5B				pop ebx	;restore ebx
 0000004E  5D				pop ebp	;restore ebp
 0000004F  C3				RET		;Return
 00000050			String_copy endp

				COMMENT %
				;*****************************************************************************************
				;* Name:  String_equals																	 *
				;* Purpose:	This method accepts the addresses of two string and compares to see if equal.
				;*						Case sensitive!		 															 
				;*																						 *
				;* Date created: November 15, 2018 at 1:00 PM	 
				;* Date last modified: 	November 15, 2018 at 1:00 PM		 
				;*																						 *
				;* Notes:	None																		 *
				;*																						 *
				;*	@param 	lpStringOne:dword															 *
				;*	@param	lpStringTwo:dword
				;*	@return byte	
				;*****************************************************************************************%
 00000050			String_equals proc Near32
 00000050  55				push ebp		;Preserve ebp
 00000051  8B EC			mov ebp, esp	;Start a new stack frame
 00000053  53				push ebx		;preserve ebx
 00000054  52				push edx		;preserve edx
					
 00000055  8B 5D 08			mov ebx, [ebp+8]	;get the first address
 00000058  8B 55 0C			mov edx, [ebp+12]	;get the second address
					
 0000005B  BE 00000000			mov esi, 0		;Use esi as index
 00000060			compareLoop:
 00000060  8A 04 1E			mov al, byte ptr[ebx+esi]		;Move the character into al
 00000063  8A 24 16			mov ah, byte ptr[edx+esi]		;Move a character into ah
 00000066  38 E0			cmp al, ah			;See if characters are equal
 00000068  75 0E			jne notEqual		;Jumps if !=
 0000006A  3C 00			cmp al, 0			;See if they are null
 0000006C  74 03			je equal			;Jump if null
 0000006E  46				inc esi				;Add one to esi
 0000006F  EB EF			jmp compareLoop		;Loop back to loop

 00000071			equal:	
 00000071  B8 00000001			mov eax, 1			;If they are equal return 1
 00000076  EB 05			jmp done			;Skip notEqual
					
 00000078			notEqual:
 00000078  B8 00000000			mov eax, 0			;Return 0	
 0000007D			done:
 0000007D  5A				pop edx			;restore edx
 0000007E  5B				pop	ebx			;restore ebx
 0000007F  5D				pop ebp			;Restore ebp
 00000080  C3				RET				;Return
 00000081			String_equals endp

				COMMENT %
				;*****************************************************************************************
				;* Name:  String_equalsIgnoreCase														 *
				;* Purpose: This method accepts the addresses of two string and compares to see if equal.
				;*						Not case sensitive!				 															 
				;*																						 *
				;* Date created: November 15, 2018 at 1:00 PM	 
				;* Date last modified: 	November 15, 2018 at 1:00 PM		 
				;*																						 *
				;* Notes:	None																		 *
				;*																						 *
				;*	@param 	lpStringOne:dword															 *
				;*	@param	lpStringTwo:dword
				;*	@return byte
				;*****************************************************************************************%
 00000081			String_equalsIgnoreCase proc Near32
 00000081  55				push ebp		;Preserve ebp
 00000082  8B EC			mov ebp, esp	;Start a new stack frame
 00000084  53				push ebx		;Preserve ebx
 00000085  52				push edx		;Preserve edx
					
 00000086  8B 5D 08			mov ebx, [ebp+8]	;get the first address
 00000089  8B 55 0C			mov edx, [ebp+12]	;get the second address
					
 0000008C  BE 00000000			mov esi, 0		;Use esi as index
 00000091			compareLoop:
 00000091  8A 04 1E			mov al, byte ptr[ebx+esi]		;Move the character into al
 00000094  8A 24 16			mov ah, byte ptr[edx+esi]		;Move a character into ah
 00000097  38 E0			cmp al, ah	 ;See if characters are the same
 00000099  75 07			jne checkLetters	;Jumps if !=
 0000009B  3C 00			cmp al, 0			;See if they are null
 0000009D  74 18			je equal			;Jump if null
 0000009F  46				inc esi				;Add one to esi
 000000A0  EB EF			jmp compareLoop		;Loop back to loop
					
					
 000000A2			checkLetters:
					
					.if al < 5Bh	;check if al is uppercase
 000000A6  04 20				add al, 20h	;if it is add 20h
					.endif			;end statement
					.if ah < 5Bh	;check if ah is uppercase
 000000AD  80 C4 20				add ah, 20h	;if then add 20h
					.endif			;end statment
					
 000000B0  46				inc esi			;Increment esi
 000000B1  38 E0			cmp al,ah		;Compare to see if they are equal
 000000B3  75 09			jne notEqual	;if they are not then jump
 000000B5  EB DA			jmp compareLoop	;loop back otherwise

 000000B7			equal:	
 000000B7  B8 00000001			mov eax, 1			;If they are equal return 1
 000000BC  EB 05			jmp done			;Skip notEqual
					
 000000BE			notEqual:
 000000BE  B8 00000000			mov eax, 0			;Return 0	
 000000C3			done:
 000000C3  5A				pop	edx 		;Restore edx
 000000C4  5B				pop	ebx			;restore ebx
 000000C5  5D				pop ebp			;Restore ebp
 000000C6  C3				RET				;Return
 000000C7			String_equalsIgnoreCase endp

				COMMENT %
				;*****************************************************************************************
				;* Name:  String_toUpperCase															 *
				;* Purpose:	Makes a deep copy of a provided string but all capitalized			 															 
				;*																						 *
				;* Date created: November 15, 2018 at 1:00 PM		 
				;* Date last modified: November 15, 2018 at 1:00 PM			 
				;*																						 *
				;* Notes:	None																		 *
				;*																						 *
				;*	@param 	lpStringOriginal:dword														 *
				;*	@return dword	
				;*****************************************************************************************%
 000000C7			String_toUpperCase proc Near32
 000000C7  55				push ebp		;Preserve ebp
 000000C8  8B EC			mov ebp, esp	;Start a new stack frame
 000000CA  53				push ebx		;Preserve ebx
 000000CB  52				push edx		;Preserve edx
 000000CC  56				push esi		;Preserve esi
					
 000000CD  8B 5D 08			mov ebx, [ebp+8]	;save address of string
					
 000000D0  53				push ebx			;Push the parameter
 000000D1  E8 FFFFFF2A			call String_Length	;Get the length of the string
 000000D6  5B				pop ebx				;Get address back
					
 000000D7  40				inc eax		;Inc to make space for NULL
					INVOKE memoryallocBailey,eax ;Create a new memory block
 000000DE  8B D0			mov edx, eax		;Save new address
					
 000000E0  BE 00000000			mov esi, 0		;Make sure esi is set to 0 for the offset
					
 000000E5			beginLoop:
 000000E5  8A 04 1E			mov al, byte ptr[ebx+esi]		;Move the character into al
					.if al > 60h	;check if al is lowercase
						.if al < 7Bh	;If it is then see if less than 5A
 000000F0  2C 20				sub al, 20h	;if it is add 20h
						.endif		;End if 
					.endif
 000000F2  88 04 16			mov byte ptr[edx+esi], al		;Copy into destination string
 000000F5  80 3C 16 00			cmp byte ptr[edx+esi], 0		;See if last byte is null
 000000F9  74 03			je done			;Jump if the final character is null
 000000FB  46				inc esi			;Increment index
 000000FC  EB E7			jmp beginLoop	;Return to beginning of loop
					
 000000FE			done:
 000000FE  8B C2			mov eax, edx	;Return the address of the new string

 00000100  5E				pop esi	;restore esi
 00000101  5A				pop edx	;restore edx
 00000102  5B				pop ebx	;restore ebx
 00000103  5D				pop ebp	;restore ebp
 00000104  C3				RET
 00000105			String_toUpperCase endp

				COMMENT %
				;*****************************************************************************************
				;* Name:  String_toLowerCase															 *
				;* Purpose:	Makes a deep copy of a provided string but all lowercase			 															 
				;*																						 *
				;* Date created: November 15, 2018 at 1:00 PM		 
				;* Date last modified: November 15, 2018 at 1:00 PM			 
				;*																						 *
				;* Notes:	None																		 *
				;*																						 *
				;*	@param 	lpStringOriginal:dword														 *
				;*	@return dword	
				;*****************************************************************************************%
 00000105			String_toLowerCase proc Near32
 00000105  55				push ebp		;Preserve ebp
 00000106  8B EC			mov ebp, esp	;Start a new stack frame
 00000108  53				push ebx		;Preserve ebx
 00000109  52				push edx		;Preserve edx
 0000010A  56				push esi		;Preserve esi
					
 0000010B  8B 5D 08			mov ebx, [ebp+8]	;save address of string
					
 0000010E  53				push ebx			;Push the parameter
 0000010F  E8 FFFFFEEC			call String_Length	;Get the length of the string
 00000114  5B				pop ebx				;Get address back
					
 00000115  40				inc eax		;Inc to make space for NULL
					INVOKE memoryallocBailey,eax ;Create a new memory block
 0000011C  8B D0			mov edx, eax		;Save new address
					
 0000011E  BE 00000000			mov esi, 0		;Make sure esi is set to 0 for the offset
					
 00000123			beginLoop:
 00000123  8A 04 1E			mov al, byte ptr[ebx+esi]		;Move the character into al
					.if al > 40h	;check if al is uppercase
						.if al < 5Bh	;If it is then see if less than 5A
 0000012E  04 20				add al, 20h	;if it is add 20h
						.endif		;End if 
					.endif
 00000130  88 04 16			mov byte ptr[edx+esi], al		;Copy into destination string
 00000133  80 3C 16 00			cmp byte ptr[edx+esi], 0		;See if last byte is null
 00000137  74 03			je done			;Jump if the final character is null
 00000139  46				inc esi			;Increment index
 0000013A  EB E7			jmp beginLoop	;Return to beginning of loop
					
 0000013C			done:
 0000013C  8B C2			mov eax, edx	;Return the address of the new string
					
 0000013E  5E				pop esi	;restore esi
 0000013F  5A				pop edx	;restore edx
 00000140  5B				pop ebx	;restore ebx
 00000141  5D				pop ebp	;Restore ebp
 00000142  C3				RET		;return
 00000143			String_toLowerCase endp

				COMMENT %
				;*****************************************************************************************
				;* Name:  String_appends															 	 *
				;* Purpose:	Takes two strings and appends them together into a new string. Returns the 
				;*			address of said string			 															 
				;*																						 *
				;* Date created: November 15, 2018 at 1:00 PM		 
				;* Date last modified: November 15, 2018 at 1:00 PM			 
				;*																						 *
				;* Notes:	None																		 *
				;*																						 *
				;*	@param 	lpStringOne:dword														     *
				;*	@param 	lpStringTwo :dword
				;*	@return dword	
				;*****************************************************************************************%
 00000143			String_appends proc Near32
 00000143  55				push ebp		;Preserve ebp
 00000144  8B EC			mov ebp, esp	;Set a new stack frame
 00000146  53				push ebx		;Preserve ebx
 00000147  51				push ecx		;Preserve ecx
 00000148  52				push edx		;Preserve edx
 00000149  56				push esi		;Preserve esi
					
 0000014A  8B 5D 08			mov ebx, [ebp+8]	;save address of string
 0000014D  8B 55 0C			mov edx, [ebp+12]	;Save second string address
					
 00000150  53				push ebx			;Push the parameter
 00000151  E8 FFFFFEAA			call String_Length	;Get the length of the string
 00000156  5B				pop ebx				;Get address back
					
 00000157  8B C8			mov ecx, eax		;Move the length into ecx
 00000159  52				push edx			;Push the parameter
 0000015A  E8 FFFFFEA1			call String_Length	;Get the length of the string
 0000015F  5A				pop edx				;Get address back
					
 00000160  03 C1			add eax, ecx		;Add the two sizes together 
					
 00000162  40				inc eax		;Inc to make space for NULL
					INVOKE memoryallocBailey,eax ;Create a new memory block
					
 00000169  BE 00000000			mov esi, 0		;Set the index to 0
					
 0000016E			beginLoop:
 0000016E  80 3C 1E 00			cmp byte ptr[ebx+esi], 0		;See if last byte is null
 00000172  74 09			je nextString			;Jump if the final character is null
 00000174  8A 0C 1E			mov cl, byte ptr[ebx+esi]		;Move the character into al
 00000177  88 0C 06			mov byte ptr[eax+esi], cl		;Copy into destination string
 0000017A  46				inc esi			;Increment index
 0000017B  EB F1			jmp beginLoop	;Return to beginning of loop
 0000017D			nextString:	
 0000017D  BB 00000000			mov ebx, 0	;Use ebx to index
 00000182			nextLoop:
 00000182  8A 0C 13			mov cl, byte ptr[edx+ebx]		;Move the character into al
 00000185  88 0C 06			mov byte ptr[eax+esi], cl		;Copy into destination string
 00000188  80 3C 06 00			cmp byte ptr[eax+esi], 0		;See if last byte is null
 0000018C  74 04			je done			;Jump if the final character is null
 0000018E  43				inc ebx			;Increment index
 0000018F  46				inc esi			;Increment index
 00000190  EB F0			jmp nextLoop	;Return to beginning of loop	
					
 00000192			done:
 00000192  5E				pop esi	;Restore
 00000193  5A				pop	edx	;Restore
 00000194  59				pop ecx	;Restore
 00000195  5B				pop ebx	;Restore
 00000196  5D				pop ebp		;Restore ebp
 00000197  C3				RET			;Return
 00000198			String_appends endp
					END
Microsoft (R) Macro Assembler Version 6.11		    11/15/18 19:23:05
proj5a.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000198 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

String_appends . . . . . . . . .	P Near	 00000143 _TEXT	Length= 00000055 Public
  beginLoop  . . . . . . . . . .	L Near	 0000016E _TEXT	
  nextString . . . . . . . . . .	L Near	 0000017D _TEXT	
  nextLoop . . . . . . . . . . .	L Near	 00000182 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000192 _TEXT	
String_copy  . . . . . . . . . .	P Near	 0000001C _TEXT	Length= 00000034 Public
  beginLoop  . . . . . . . . . .	L Near	 0000003A _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000049 _TEXT	
String_equalsIgnoreCase  . . . .	P Near	 00000081 _TEXT	Length= 00000046 Public
  compareLoop  . . . . . . . . .	L Near	 00000091 _TEXT	
  checkLetters . . . . . . . . .	L Near	 000000A2 _TEXT	
  equal  . . . . . . . . . . . .	L Near	 000000B7 _TEXT	
  notEqual . . . . . . . . . . .	L Near	 000000BE _TEXT	
  done . . . . . . . . . . . . .	L Near	 000000C3 _TEXT	
String_equals  . . . . . . . . .	P Near	 00000050 _TEXT	Length= 00000031 Public
  compareLoop  . . . . . . . . .	L Near	 00000060 _TEXT	
  equal  . . . . . . . . . . . .	L Near	 00000071 _TEXT	
  notEqual . . . . . . . . . . .	L Near	 00000078 _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000007D _TEXT	
String_length  . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001C Public
  lengthLoop . . . . . . . . . .	L Near	 0000000D _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000016 _TEXT	
String_toLowerCase . . . . . . .	P Near	 00000105 _TEXT	Length= 0000003E Public
  beginLoop  . . . . . . . . . .	L Near	 00000123 _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000013C _TEXT	
String_toUpperCase . . . . . . .	P Near	 000000C7 _TEXT	Length= 0000003E Public
  beginLoop  . . . . . . . . . .	L Near	 000000E5 _TEXT	
  done . . . . . . . . . . . . .	L Near	 000000FE _TEXT	
memoryallocBailey  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT

	   0 Warnings
	   0 Errors
